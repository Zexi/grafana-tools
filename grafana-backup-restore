#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import logging
import logging.handlers
import optparse
import os
import sys
import io
import re
import urllib2
import base64

from os.path import join
from datetime import datetime


def grafana_dashboard_backups(grafana_host, grafana_port, dest_dir):
    url = 'http://%s:%s' % (grafana_host, grafana_port)

    def get_board_names(url, params=None):
        req = urllib2.Request('%s/api/search' % url)
        response = urllib2.urlopen(req)
        data = json.loads(response.read())
        board_names = [re.sub(r'^db\/', '', item['uri'])
                       for item in data]
        return board_names

    def save_board_json(url, save_dir, board_names):
        now = datetime.now().isoformat()
        save_dir = save_dir + os.sep + now
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        for name in board_names:
            req = urllib2.Request('%s/api/dashboards/db/%s' % (url, name))
            response = urllib2.urlopen(req)
            data = json.loads(response.read())
            dump_file = save_dir + os.sep + name + '.json'
            with io.open(dump_file, 'w', encoding='utf8') as f:
                content = json.dumps(data, indent=2, ensure_ascii=False)
                f.write(content)
        return save_dir

    board_names = get_board_names(url)
    save_dir = save_board_json(url, dest_dir, board_names)
    return (board_names, save_dir)


def grafana_dashboard_restore(grafana_host, grafana_port,
                              board_names, backup_dir,
                              username=None, password=None):
    url = 'http://%s:%s' % (grafana_host, grafana_port)

    def get_data(board_names, backup_dir):
        for board_name in board_names:
            json_file = backup_dir + os.sep + board_name + '.json'
            with open(json_file, 'r') as f:
                yield json.load(f, encoding='utf-8')

    def upload_data(url, username, password, board_names, backup_dir):
        upload_api = '%s/api/dashboards/db' % url
        base64_auth_string = None
        if username and password:
            base64_auth_string = base64.encodestring(
                '%s:%s' % (username, password)).replace('\n', '')
        for data in get_data(board_names, backup_dir):
            del data['dashboard']['id']
            req_data = json.dumps({'dashboard': data['dashboard'],
                                   'overwrite': True})
            req = urllib2.Request(upload_api)
            if base64_auth_string:
                req.add_header('Authorization',
                               'Basic %s' % base64_auth_string)
            req.add_header('Content-Type', 'application/json')

            response = urllib2.urlopen(req, req_data)
            logger.info(response.read())

    upload_data(url, username, password, board_names, backup_dir)


def rename_by_slug(jsonfiles):
    board_names = []
    for file_path in jsonfiles:
        slug = None
        with open(file_path, 'r') as f:
            slug = json.load(f, encoding='utf-8')['meta']['slug']
        if slug:
            new_basename = '%s.json' % slug
            new_path = os.path.dirname(file_path) + os.sep + new_basename
            logger.info('Rename: %s => %s' % (file_path, new_path))
            os.rename(file_path, new_path)
            board_names.append(slug)
        else:
            logger.error('Not Found %s dashboard slug' % file_path)
            sys.exit(1)
    return board_names


def main():
    parser = optparse.OptionParser()

    parser.add_option('-s', '--backup_grafana-server',
                      dest='grafana_host',
                      metavar='<BACKUP_GRAFANA_HOST>')

    parser.add_option('-p', '--backup_grafana-port',
                      default='80',
                      dest='grafana_port',
                      metavar='<BACKUP_GRAFANA_PORT>')
    parser.add_option('-d', '--dest-dir',
                      default='./grafana-dashboards-backups',
                      dest='dest_dir',
                      help='The destination directory'
                      ' where dashboards will be saved',
                      metavar='<DEST_DIR>')

    parser.add_option('-t', '--restore-grafana-server',
                      dest='to_grafana_host',
                      metavar='<RESTORE_GRAFANA_HOST>')

    parser.add_option('-P', '--restore-grafana-port',
                      dest='to_grafana_port',
                      default='80',
                      metavar='<RESTORE_GRAFANA_HOST>')

    parser.add_option('--restore-username',
                      dest='username',
                      default=None,
                      metavar='<RESTORE_GRAFANA_USERNAME>')

    parser.add_option('--restore-password',
                      dest='password',
                      default=None,
                      metavar='<RESTORE_GRAFANA_PASSWORD>')

    parser.add_option('-D', '--debug',
                      action='store_true',
                      dest='debug',
                      default=False,
                      help='Debug output')

    (options, args) = parser.parse_args()

    if not options.grafana_host and not options.to_grafana_host:
        parser.print_help()
        parser.error('Grafana backup or restore host is required')
    grafana_host = options.grafana_host
    grafana_port = options.grafana_port
    dest_dir = options.dest_dir
    to_grafana_host = options.to_grafana_host
    to_grafana_port = options.to_grafana_port
    username = options.username
    password = options.password
    debug = options.debug

    if debug:
        logger.setLevel(logging.DEBUG)
        urllib2.install_opener(urllib2.build_opener(
            urllib2.HTTPHandler(debuglevel=1)))
    else:
        logger.setLevel(logging.INFO)

    if grafana_host:
        board_names, backup_dir = grafana_dashboard_backups(
            grafana_host, grafana_port, dest_dir)
    else:
        backup_dir = dest_dir
        jsonfiles = [join(backup_dir, f) for f in os.listdir(backup_dir)
                     if re.search(r'.*\.json$', join(backup_dir, f))]
        if not jsonfiles:
            logger.error('Not found backup json files in: %s' % backup_dir)
            sys.exit(1)
        board_names = rename_by_slug(jsonfiles)

    if to_grafana_host:
        grafana_dashboard_restore(to_grafana_host, to_grafana_port,
                                  board_names, backup_dir, username, password)



def mk_logger():
    try:
        import colorlog
        have_colorlog = True
    except ImportError:
        have_colorlog = False
    logger = logging.getLogger(__name__)
    format = '%(asctime)s - %(levelname)-8s - %(message)s'
    cformat = '%(log_color)s' + format
    date_format = '%Y-%m-d %H:%M:%S'
    f = logging.Formatter(format, date_format)
    if have_colorlog:
        cf = colorlog.ColoredFormatter(cformat, date_format,
                log_colors = {'DEBUG': 'reset', 'INFO': 'green',
                    'WARNING': 'bold_yellow', 'ERROR': 'bold_red',
                    'CRITICAL': 'bold_red'})
    else:
        cf = f
    ch = logging.StreamHandler()
    if os.isatty(2):
        ch.setFormatter(cf)
    else:
        ch.setFormatter(f)
    logger.addHandler(ch)
    return logger


if __name__ == '__main__':
    logger = mk_logger()
    main()
